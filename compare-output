#!/usr/bin/env ruby

# For comparing dtalackey output with expected one. Solves the problem of
# variation in output from multi-threaded program.

if ARGV.length != 2
  puts(%q(Usage: compare-output output target
Allowed target contents:
  line-used-as-is
  optional:line (marks line as optional)
  set (begins a set of lines in arbitrary order, no nested sets)
  subset (like set but all optional and at least one required)
  end (ends a set or subset)
  escape:line (allows line to start with any special word)
Spaces are ignored before optional:, set, end, escape:))
  exit 5
end

# Handles line or lines in arbitrary order. Lines may be optional.
class Target
  def initialize
    @compulsory = []
    @optional = []
    @subset = false
    @max_optional_length = 0
  end

  def subset
    @subset = true
  end

  def add(target, optional)
    if optional || @subset
      @optional.push(target)
      @max_optional_length = @optional.length
    else
      @compulsory.push(target)
    end
  end

  def length
    return @compulsory.length + @optional.length
  end

  def check(output)
    [ @compulsory, @optional ].each do |lst|
      idx = lst.index output
      next if idx.nil?
      lst.delete_at idx
      return true
    end
    return false
  end

  def remains
    return (@compulsory.length > 0) || @subset && (@optional.length == @max_optional_length)
  end
end

# Read target data.
begin
  f = File.new(ARGV.last, File::RDONLY)
rescue Errno::ENOENT => e
  $stderr.puts(e.to_s)
  exit 2
end
targets = []
in_set = false
t = Target.new
f.readlines.each do |line|
  optional = false
  s = line.lstrip
  tgt = nil
  if s.start_with? "escape:"
    tgt = s.slice("escape:".length..-1)
  elsif s.start_with? "set"
    if in_set
      $stderr.puts "No nested (sub)sets allowed."
      exit 4
    end
    in_set = true
  elsif s.start_with? "subset"
    if in_set
      $stderr.puts "No nested (sub)sets allowed."
      exit 4
    end
    in_set = true
    t.subset()
  elsif s.start_with? "end"
    unless in_set
      $stderr.puts "end outside set."
      exit 4
    end
    if t.length == 0
      $stderr.puts "Empty set not allowed."
      exit 4
    end
    in_set = false
  elsif s.start_with? "optional:"
    optional = true
    tgt = s.slice("optional:".length..-1)
  else
    tgt = line
  end
  unless tgt.nil?
    t.add(tgt.rstrip, optional)
  end
  unless in_set
    targets.push(t)
    t = Target.new
  end
end
f.close
if in_set
  $stderr.puts "Set remains open."
  exit 4
end

# Read source file line by line.
begin
  f = File.new(ARGV.first, File::RDONLY)
rescue Errno::ENOENT => e
  $stderr.puts(e.to_s)
  exit 2
end
idx = 0
had_input = false
f.readlines.each do |line|
  had_input = true
  if idx == targets.length
    $stderr.puts "Out of targets."
    exit 1
  end
  line.rstrip!
  while not(targets[idx].check(line))
    if targets[idx].remains
      $stderr.puts line
      exit 1
    end
    idx = idx + 1
    if idx == targets.length
      $stderr.puts "Out of targets."
      exit 1
    end
  end
end
f.close
if not(had_input) && targets.length != 0
  $stderr.puts "No input but targets has items."
  exit 1
end
